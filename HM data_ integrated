#define F_CPU 8000000L
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
uint8_t i = 0, k = 0, v = 0x00, d = 0x00;
uint8_t t[5], w[3];

void USART0_INIT(void){
	UBRR0H = 0x00;
	UBRR0L = 0x33;
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
	UCSR0B = 0x90;
	}

void SPI_SLAVE_INIT(void){
	DDRB = 0x08;
	SPCR = 0xC0;
}
char SLAVE_REC(void){
	while(!(SPSR & 0x80));
	return SPDR;
}
void ADC_Init(void){
	ADCSRA |= (1<<ADEN)|(1<<ADPS2);
	ADMUX = 0x20;
}

void I2C_Init(void){
	TWBR=0x20;
	TWSR=0x00;
}

void I2C_Start(void){
	TWCR=0b10100100;
	while(!(TWCR & (1<<TWINT)));    
	while((TWSR & 0xF8)!= 0x08);   
	}

void I2C_Repeated_Start(void){
	TWCR=0b10100100;
	while(!(TWCR & (1<<TWINT)));
	while((TWSR & 0xF8)!= 0x10);
}

void EEPROM_ADD(void)

{

	TWDR=0b10100000;             
	TWCR=(1<<TWINT)|(1<<TWEN);   
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x18);
}



void Address1(uint8_t addrs){
	TWDR=addrs;
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x28);
}



void Address(uint32_t add){
	TWDR=add;                
	TWCR=(1<<TWINT)|(1<<TWEN);      
	while (!(TWCR & (1<<TWINT)));   
	if((TWSR & 0xF8) == 0x18){  
		TWDR=(add<<8);
		TWCR=(1<<TWINT)|(1<<TWEN);
		while (!(TWCR & (1<<TWINT)));
	
		TWDR=(add<<16);
		TWCR=(1<<TWINT)|(1<<TWEN);
		while (!(TWCR & (1<<TWINT)));
	
		TWDR=(add<<24);
		TWCR=(1<<TWINT)|(1<<TWEN);
		while (!(TWCR & (1<<TWINT)));
		}
	}


void EEPROM_write(unsigned char data){
	TWDR=data;
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x28);
	}

void ADC_convert(uint8_t mux){
	ADMUX = 0x20;
	ADMUX |= mux;
	ADCSRA |= (1<<ADSC);
	while(!(ADCSRA & (1<<ADIF)));
	EEPROM_write(ADCH);
}

int main(){	
	sei();
	DDRE &= ~(1<<PE0);
	PORTE |= (1<<PE0);
	DDRA = 0xFF;
	DDRC = 0xFF;
	DDRD |=(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
	EICRA |= 0xF0;
	EICRB |= 0xFF;
	EIMSK |= 0xFC;
	
	uint8_t timerOverflowCount=0;
		
	I2C_Init();
	SPI_SLAVE_INIT();
	USART0_INIT();	
	ADC_Init();
	PORTC = 0x00;
	PORTA = 0x00;
		
	TCNT0=0x00;
	TCCR0 = (1<<CS00)|(1<<CS02)|(1<<CS01);
	uint8_t add1 = 0x00;
	uint8_t add2 = 0x00;
	while(1){	
		 
		 while (!(TIFR & 0x01) ); 
		 TCNT0 = 0x00;
		 TIFR=0x01; 		              
		 timerOverflowCount++;	
		 PORTD = 0x10;	 
		 if (timerOverflowCount>=200){	
			PORTD = 0x20;
			
			I2C_Start();
			EEPROM_ADD();
			Address1(add1);
			Address1(add2);
			
			for(int p = 0; p<=4 ; p += 1){
				EEPROM_write(t[p]);
				add2 += 0x01;
			}
			
			EEPROM_write(v);
			add2 += 0x01;
			
			ADC_convert(0x00);
			ADC_convert(0x01);
			EEPROM_write(w[0]);
			add2 += 0x03;
						
			EEPROM_write(d);
			ADC_convert(0x02);
			ADC_convert(0x03);
			ADC_convert(0x04);
			ADC_convert(0x05);
			ADC_convert(0x06);
			ADC_convert(0x07);
			EEPROM_write(w[1]);
			EEPROM_write(w[2]);
			add2 += 0x09;
			
			TWCR=0b10010100;
			timerOverflowCount=0;
			
			
		 } 		 
	}
}
ISR(INT2_vect){
	v |= 0x03;
	}
ISR(INT3_vect){
	v |= 0x0C;
	}
ISR(INT4_vect){
	v |= 0x30;
}
ISR(INT5_vect){
	v |= 0xC0;
}
ISR(INT6_vect){
	d |= 0x03;
}
ISR(INT7_vect){
	d|= 0x30;
}
ISR(SPI_STC_vect){
	while(i<=4){
		t[i] = SPDR;
		i +=1;
		break;
	}
}
ISR(USART0_RX_vect){
	while(k<=2){
		w[k] = UDR0;
		k +=1;
		break;
	}
	
}
	

